version: "3.9"

services:
  # === Base de datos PostgreSQL ===
  db:
    image: postgres:16-alpine
    container_name: orders-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  # === Redis ===
  redis:
    image: redis:7-alpine
    container_name: orders-redis
    command: >
      sh -lc 'redis-server --requirepass "${REDIS_PASSWORD}" --appendonly yes'
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", 'redis-cli -a "${REDIS_PASSWORD}" ping | grep PONG']
      interval: 5s
      timeout: 3s
      retries: 10

  # === Inicialización de la base de datos “orders” ===
  db-init-orders:
    image: python:3.11-slim-bookworm
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGHOST: db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TARGET_DB: orders
    volumes:
      - ./orders-service/app/create_orders_db.py:/app/create_orders_db.py:ro
    working_dir: /app
    command: >
      bash -lc "pip install -q 'psycopg[binary]>=3.1,<4' && python create_orders_db.py"
    restart: "no"

  # === Servicio principal de Orders (FastAPI) ===
  orders-service:
    build:
      context: ./orders-service
      target: ${APP_TARGET:-dev}   # dev por defecto; prod en despliegue
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/orders
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/0
    working_dir: /app
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
      db-init-orders: { condition: service_completed_successfully }
    ports: ["3000:3000"]
    profiles: ["${APP_PROFILE:-dev}"]
    # Solo en dev:
    volumes:
      - type: bind
        source: ./orders-service
        target: /app
    
  # === Servicio de rutas (FastAPI) ===
  backend:
    build:
      context: ./ruta-service
    container_name: fastapi-backend
    restart: always
    env_file: .env
    depends_on:
      - db
    ports:
      - "8000:8000"
    volumes:
      - ./ruta-service:/app
        
volumes:
  pgdata:
  redis_data:
