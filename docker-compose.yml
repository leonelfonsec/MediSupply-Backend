version: "3.9"

services:
  redis:
    image: redis:7-alpine
    container_name: orders-redis
    command: >
      sh -lc 'redis-server --requirepass "${REDIS_PASSWORD:-redis}" --appendonly yes'
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", 'redis-cli -a "${REDIS_PASSWORD:-redis}" ping | grep PONG']
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  orders-service:
    build:
      context: ./orders-service
    environment:
      # Puerto prod-like (ECS suele usar 8000)
      PORT: ${PORT:-8000}

      # DB externa (p.ej. la RDS) - debe ser async:
      # DATABASE_URL=postgresql+asyncpg://orders_user:PASS@host:5432/orders
      DATABASE_URL: ${DATABASE_URL}

      # Redis local con password (igual que arriba)
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0

      SQLA_ECHO: ${SQLA_ECHO:-0}
    working_dir: /app
    depends_on:
      redis: { condition: service_healthy }
    ports:
      - "${PORT:-8000}:${PORT:-8000}"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:${PORT:-8000}/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
    restart: unless-stopped

  catalog-db:
    image: postgres:16-alpine
    container_name: catalog-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: catalogo
    ports:
      - "5433:5432"  # Puerto diferente para no conflicto
    volumes:
      - catalog_pgdata:/var/lib/postgresql/data
      - ./catalogo-service/data/001_init.sql:/docker-entrypoint-initdb.d/001_init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d catalogo"]
      interval: 5s
      timeout: 5s
      retries: 10
  
  # === Inicialización de la base de datos "catalogo" ===
  db-init-catalog:
    image: python:3.11-slim-bookworm
    depends_on:
      catalog-db:
        condition: service_healthy
    environment:
      PGHOST: catalog-db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TARGET_DB: catalogo
    volumes:
      - ./catalogo-service/app/create_catalogo_db.py:/app/create_catalogo_db.py:ro
    working_dir: /app
    command: >
      bash -lc "pip install -q 'psycopg[binary]>=3.1,<4' && python create_catalogo_db.py"
    restart: "no"

  # === Servicio principal de Catalogo (FastAPI) ===
  catalog-service:
    build:
      context: ./catalogo-service
      dockerfile: Dockerfile
    container_name: catalog-service
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@catalog-db:5432/catalogo
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1  # Base de datos Redis diferente
    working_dir: /app
    depends_on:
      catalog-db: { condition: service_healthy }
      redis: { condition: service_healthy }
      db-init-catalog: { condition: service_completed_successfully }
    ports: ["3001:8080"]  # Puerto diferente al orders-service
    profiles: ["${APP_PROFILE:-dev}"]
    volumes:
      - type: bind
        source: ./catalogo-service
        target: /app
    



  # === Servicio principal de Cliente (FastAPI) ===
  cliente-service:
    build:
      context: ./cliente-service
      dockerfile: Dockerfile
    container_name: cliente-service
    environment:
      DATABASE_URL: postgresql+asyncpg://cliente_user:cliente_pass@cliente-db:5432/cliente_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/2  # Base de datos Redis diferente
      SLA_MAX_RESPONSE_MS: 2000
      LOG_LEVEL: INFO
      DEBUG: false
      ORDERS_SERVICE_URL: http://orders-service:3000
      CATALOGO_SERVICE_URL: http://catalog-service:3001
      ALLOWED_ORIGINS: "*"
      ALLOWED_METHODS: "*"
      ALLOWED_HEADERS: "*"
    working_dir: /app
    depends_on:
      cliente-db: { condition: service_healthy }
      redis: { condition: service_healthy }
      db-init-cliente: { condition: service_completed_successfully }
    ports: ["3003:8000"]  # Puerto diferente a los otros servicios
    profiles: ["${APP_PROFILE:-dev}"]
    volumes:
      - type: bind
        source: ./cliente-service
        target: /app

  # === Servicio de rutas (FastAPI) ===
  backend:
    build:
      context: ./ruta-service
    container_name: fastapi-backend
    restart: always
    env_file: .env
    depends_on:
      - db
    ports:
      - "8001:8000"
    volumes:
      - ./ruta-service:/app

  # === Cliente Service Database ===
  cliente-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: cliente_db
      POSTGRES_USER: cliente_user
      POSTGRES_PASSWORD: cliente_pass
    ports:
      - "5435:5432"
    volumes:
      - cliente_pgdata:/var/lib/postgresql/data
      - ./cliente-service/data/001_init.sql:/docker-entrypoint-initdb.d/001_init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cliente_user -d cliente_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # === Inicialización de la base de datos "cliente" ===
  db-init-cliente:
    image: python:3.11-slim
    depends_on:
      cliente-db:
        condition: service_healthy
    environment:
      PGHOST: cliente-db
      POSTGRES_USER: cliente_user
      POSTGRES_PASSWORD: cliente_pass
      TARGET_DB: cliente_db
    volumes:
      - ./cliente-service/app/create_cliente_db.py:/app/create_cliente_db.py:ro
    working_dir: /app
    command: >
      bash -lc "pip install -q 'psycopg[binary]>=3.1,<4' && python create_cliente_db.py"
    restart: "no"
        
volumes:
  pgdata:
  catalog_pgdata:
  cliente_pgdata:
  redis_data:
