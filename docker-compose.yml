version: "3.9"

services:
  redis:
    image: redis:7-alpine
    container_name: orders-redis
    command: >
      sh -lc 'redis-server --requirepass "${REDIS_PASSWORD:-redis}" --appendonly yes'
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", 'redis-cli -a "${REDIS_PASSWORD:-redis}" ping | grep PONG']
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  orders-service:
    build:
      context: ./orders-service
    environment:
      # Puerto prod-like (ECS suele usar 8000)
      PORT: ${PORT:-8000}

      # DB externa (p.ej. la RDS) - debe ser async:
      # DATABASE_URL=postgresql+asyncpg://orders_user:PASS@host:5432/orders
      DATABASE_URL: ${DATABASE_URL}

      # Redis local con password (igual que arriba)
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0

      SQLA_ECHO: ${SQLA_ECHO:-0}
    working_dir: /app
    depends_on:
      redis: { condition: service_healthy }
    ports:
      - "${PORT:-8000}:${PORT:-8000}"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:${PORT:-8000}/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
    restart: unless-stopped

volumes:
  redis_data:
