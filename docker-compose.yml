version: "3.9"

services:
  # ---------- Infra base ----------
  redis:
    image: redis:7-alpine
    container_name: orders-redis
    command: >
      sh -lc 'redis-server --requirepass "${REDIS_PASSWORD:-redis}" --appendonly yes'
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", 'redis-cli -a "${REDIS_PASSWORD:-redis}" ping | grep PONG']
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  # ---------- Orders ----------
  orders-service:
    build:
      context: ./orders-service
    environment:
      PORT: ${PORT:-8000}
      # Si usas RDS en local, exporta DATABASE_URL en .env (sin comillas) y borra la línea siguiente.
      DATABASE_URL: ${DATABASE_URL}
      # Redis local con password
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      SQLA_ECHO: ${SQLA_ECHO:-0}
    working_dir: /app
    depends_on:
      redis: { condition: service_healthy }
      # Si activas el perfil localdb, orders-db será requerido:
      orders-db:
        condition: service_healthy
    ports:
      - "${PORT:-8000}:${PORT:-8000}"
    healthcheck:
      # Asegúrate que tu imagen tenga curl o reemplaza por wget/busybox
      test: ["CMD-SHELL", "curl -fsS http://localhost:${PORT:-8000}/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
    restart: unless-stopped
    profiles: ["${APP_PROFILE:-dev}"]

  # Base de datos local de Orders (opcional para dev). Activa con: COMPOSE_PROFILES=localdb
  orders-db:
    image: postgres:16-alpine
    container_name: orders-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-orders_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-orders_pass}
      POSTGRES_DB: orders
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-orders_user} -d orders"]
      interval: 5s
      timeout: 5s
      retries: 10
    profiles: ["localdb"]

  worker-orders:
    build:
      context: ./orders-service
      dockerfile: Dockerfile
    command: celery -A app.tasks:celery worker -l INFO --concurrency=1 --pool=solo
    environment:
      # En local, si activaste orders-db:
      DATABASE_URL: ${ORDERS_DATABASE_URL:-postgresql+asyncpg://${POSTGRES_USER:-orders_user}:${POSTGRES_PASSWORD:-orders_pass}@orders-db:5432/orders}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
    working_dir: /code
    volumes:
      - ./orders-service:/code
    depends_on:
      redis: { condition: service_healthy }
      orders-db:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["${APP_PROFILE:-dev}","localdb"]

  # ---------- Catálogo ----------
  catalog-db:
    image: postgres:16-alpine
    container_name: catalog-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-catalog_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-catalog_pass}
      POSTGRES_DB: catalogo
    ports:
      - "5433:5432"
    volumes:
      - catalog_pgdata:/var/lib/postgresql/data
      - ./catalogo-service/data/001_init.sql:/docker-entrypoint-initdb.d/001_init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-catalog_user} -d catalogo"]
      interval: 5s
      timeout: 5s
      retries: 10

  db-init-catalog:
    image: python:3.11-slim-bookworm
    depends_on:
      catalog-db: { condition: service_healthy }
    environment:
      PGHOST: catalog-db
      POSTGRES_USER: ${POSTGRES_USER:-catalog_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-catalog_pass}
      TARGET_DB: catalogo
    volumes:
      - ./catalogo-service/app/create_catalogo_db.py:/app/create_catalogo_db.py:ro
    working_dir: /app
    command: >
      bash -lc "pip install -q 'psycopg[binary]>=3.1,<4' && python create_catalogo_db.py"
    restart: "no"

  catalog-service:
    build:
      context: ./catalogo-service
      dockerfile: Dockerfile
    container_name: catalog-service
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-catalog_user}:${POSTGRES_PASSWORD:-catalog_pass}@catalog-db:5432/catalogo
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/1
    working_dir: /app
    depends_on:
      catalog-db: { condition: service_healthy }
      redis: { condition: service_healthy }
      db-init-catalog: { condition: service_completed_successfully }
    ports: ["3001:8080"]
    profiles: ["${APP_PROFILE:-dev}"]
    volumes:
      - type: bind
        source: ./catalogo-service
        target: /app

  # ---------- Cliente ----------
  cliente-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: cliente_db
      POSTGRES_USER: cliente_user
      POSTGRES_PASSWORD: cliente_pass
    ports:
      - "5435:5432"
    volumes:
      - cliente_pgdata:/var/lib/postgresql/data
      - ./cliente-service/data/001_init.sql:/docker-entrypoint-initdb.d/001_init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cliente_user -d cliente_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  db-init-cliente:
    image: python:3.11-slim
    depends_on:
      cliente-db: { condition: service_healthy }
    environment:
      PGHOST: cliente-db
      POSTGRES_USER: cliente_user
      POSTGRES_PASSWORD: cliente_pass
      TARGET_DB: cliente_db
    volumes:
      - ./cliente-service/app/create_cliente_db.py:/app/create_cliente_db.py:ro
    working_dir: /app
    command: >
      bash -lc "pip install -q 'psycopg[binary]>=3.1,<4' && python create_cliente_db.py"
    restart: "no"

  cliente-service:
    build:
      context: ./cliente-service
      dockerfile: Dockerfile
    container_name: cliente-service
    environment:
      DATABASE_URL: postgresql+asyncpg://cliente_user:cliente_pass@cliente-db:5432/cliente_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/2
      SLA_MAX_RESPONSE_MS: 2000
      LOG_LEVEL: INFO
      DEBUG: "false"
      # Usa nombres de servicio y puertos de contenedor:
      ORDERS_SERVICE_URL: http://orders-service:${PORT:-8000}
      CATALOGO_SERVICE_URL: http://catalog-service:8080
      ALLOWED_ORIGINS: "*"
      ALLOWED_METHODS: "*"
      ALLOWED_HEADERS: "*"
    working_dir: /app
    depends_on:
      cliente-db: { condition: service_healthy }
      redis: { condition: service_healthy }
      db-init-cliente: { condition: service_completed_successfully }
    ports: ["3003:8000"]
    profiles: ["${APP_PROFILE:-dev}"]
    volumes:
      - type: bind
        source: ./cliente-service
        target: /app

  # ---------- Rutas (tu backend extra) ----------
  backend:
    build:
      context: ./ruta-service
    container_name: fastapi-backend
    restart: always
    env_file: .env
    depends_on:
      - cliente-db
    ports:
      - "8001:8000"
    volumes:
      - ./ruta-service:/app

  # ---------- HAProxy + Consumer ----------
  haproxy:
    image: haproxy:2.9
    volumes:
      - ./consumer-lb/app/load-balancer/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    command: ["haproxy","-W","-db","-f","/usr/local/etc/haproxy/haproxy.cfg"]
    ports: ["8080:8080","8404:8404"]
    depends_on:
      orders-service: { condition: service_healthy }
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8404/ || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  consumer:
    image: python:3.12-slim
    working_dir: /app
    command: >
      bash -lc "
        pip install --no-cache-dir boto3==1.40.30 httpx==0.28.1 &&
        python worker.py
      "
    volumes:
      - ./consumer-lb/app/consumer/worker.py:/app/worker.py:ro
      - ~/.aws:/root/.aws:ro  # Credenciales de AWS para dev
    environment:
      AWS_REGION: ${AWS_REGION:-us-east-1}
      SQS_QUEUE_URL: ${SQS_QUEUE_URL:-https://sqs.us-east-1.amazonaws.com/123456789012/orders-events.fifo}
      LB_TARGET_URL: http://haproxy:8080/orders
      SQS_BATCH: ${SQS_BATCH:-10}
      SQS_WAIT: ${SQS_WAIT:-20}
      SQS_VISIBILITY: ${SQS_VISIBILITY:-60}
      HTTP_TIMEOUT: ${HTTP_TIMEOUT:-30}
    depends_on:
      haproxy: { condition: service_healthy }
    restart: unless-stopped

volumes:
  pgdata:
  catalog_pgdata:
  cliente_pgdata:
  redis_data:
