version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: orders-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-orders}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-orders}"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: orders-redis
    command: >
      sh -lc 'redis-server --requirepass "${REDIS_PASSWORD:-redis}" --appendonly yes'
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", 'redis-cli -a "${REDIS_PASSWORD:-redis}" ping | grep PONG']
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  db-init-orders:
    image: python:3.11-slim-bookworm
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGHOST: db
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      TARGET_DB: ${POSTGRES_DB:-orders}
    volumes:
      - ./orders-service/app/create_orders_db.py:/app/create_orders_db.py:ro
    working_dir: /app
    command: >
      bash -lc "pip install -q 'psycopg[binary]>=3.1,<4' && python create_orders_db.py"
    restart: "no"

  orders-service:
    build:
      context: ./orders-service
    environment:
      PORT: ${PORT:-3000}
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-orders}
      # Redis con contraseÃ±a (como tu original)
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis}@redis:6379/0
      SQLA_ECHO: "0"
      RUN_DDL_ON_STARTUP: "true"    
      WEB_CONCURRENCY: "1"         
    working_dir: /app
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
      db-init-orders: { condition: service_completed_successfully }
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    volumes:
      - ./orders-service:/app
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:${PORT:-3000}/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
    restart: unless-stopped

volumes:
  pgdata:
  redis_data:
