"""
Rutas API para cliente-service siguiendo patr√≥n catalogo-service
Endpoints REST para HU07: Consultar Cliente
"""
import time
from fastapi import APIRouter, Depends, Query, Path, HTTPException, status, Request
from fastapi.responses import JSONResponse
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Optional, List

from app.db import get_session
from app.services.client_service import ClienteService
from app.schemas import (
    ClienteBasicoResponse, HistoricoCompletoResponse,
    ErrorResponse
)
from app.config import get_settings

# Router para endpoints de cliente
router = APIRouter(prefix="/cliente", tags=["cliente"])
settings = get_settings()


@router.get("/",response_model=List[ClienteBasicoResponse],)
async def listar_clientes(
    request: Request,
    limite: int = Query(
        default=50,
        ge=1,
        le=500,
        description="N√∫mero m√°ximo de clientes a retornar"
    ),
    offset: int = Query(
        default=0,
        ge=0,
        description="N√∫mero de registros a saltar (para paginaci√≥n)"
    ),
    activos_solo: bool = Query(
        default=True,
        description="Si mostrar solo clientes activos (true) o todos (false)"
    ),
    ordenar_por: str = Query(
        default="nombre",
        pattern="^(nombre|nit|codigo_unico|created_at)$",
        description="Campo por el cual ordenar los resultados"
    ),
    vendedor_id: Optional[str] = Query(
        None,
        min_length=1,
        max_length=64,
        description="ID del vendedor que realiza la consulta (para trazabilidad - opcional)"
    ),
    session: AsyncSession = Depends(get_session)
):
    """Listar todos los clientes disponibles con paginaci√≥n y filtros"""
    started = time.perf_counter_ns()
    
    try:
        service = ClienteService(session, settings)
        clientes = await service.listar_clientes(
            limite=limite,
            offset=offset,
            activos_solo=activos_solo,
            ordenar_por=ordenar_por
        )
        
        # Medir performance
        took_ms = int((time.perf_counter_ns() - started) / 1_000_000)
        
        # Headers informativos siguiendo patr√≥n catalogo
        headers = {
            "X-Response-Time-Ms": str(took_ms),
            "X-Total-Items": str(len(clientes)),
            "X-Limit": str(limite),
            "X-Offset": str(offset),
            "X-SLA-Compliant": str(took_ms <= settings.sla_max_response_ms)
        }
        
        return JSONResponse(
            content=[cliente.dict() for cliente in clientes],
            headers=headers
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={
                "error": "INTERNAL_SERVER_ERROR",
                "message": "Error interno al listar clientes",
                "details": {"error_id": f"ERR_{int(time.time())}"},
                "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ")
            }
        )


@router.get(
    "/search",
    response_model=ClienteBasicoResponse,
    summary="Buscar cliente por NIT, nombre o c√≥digo √∫nico",
    description="""
    Busca un cliente por NIT, nombre o c√≥digo √∫nico.
    
    **Criterios de aceptaci√≥n implementados:**
    - El vendedor puede buscar un cliente por NIT, nombre o c√≥digo √∫nico
    - La consulta debe responder en ‚â§ 2 segundos  
    - La informaci√≥n consultada queda registrada para trazabilidad
    
    **Ejemplos de b√∫squeda:**
    - Por NIT: `900123456-7`
    - Por nombre: `Farmacia San Jos√©` 
    - Por c√≥digo: `FSJ001`
    """
)
async def buscar_cliente(
    request: Request,
    q: str = Query(
        ...,
        min_length=2,
        max_length=255,
        description="NIT, nombre o c√≥digo √∫nico del cliente a buscar"
    ),
    vendedor_id: str = Query(
        ...,
        min_length=1,
        max_length=64,
        description="ID del vendedor que realiza la consulta (para trazabilidad)"
    ),
    session: AsyncSession = Depends(get_session)
):
    """Buscar cliente por NIT, nombre o c√≥digo √∫nico"""
    print(f"üîç DEBUG: Iniciando buscar_cliente con q='{q}', vendedor_id='{vendedor_id}'")
    started = time.perf_counter_ns()
    
    try:
        print(f"üîç DEBUG: Creando ClienteService...")
        service = ClienteService(session, settings)
        print(f"üîç DEBUG: ClienteService creado, llamando buscar_cliente...")
        cliente = await service.buscar_cliente(
            termino_busqueda=q,
            vendedor_id=vendedor_id
        )
        print(f"üîç DEBUG: Cliente encontrado: {cliente}")
        
        # Medir performance
        took_ms = int((time.perf_counter_ns() - started) / 1_000_000)
        
        # Headers informativos (usando Response para agregar headers)
        print(f"üîç DEBUG: A√±adiendo headers informativos - Response time: {took_ms}ms")
        
        # Usar response directo - FastAPI maneja la serializaci√≥n autom√°ticamente
        return cliente
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå DEBUG ERROR en buscar_cliente: {type(e).__name__}: {str(e)}")
        import traceback
        print(f"‚ùå DEBUG TRACEBACK: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={
                "error": "INTERNAL_SERVER_ERROR",
                "message": "Error interno al buscar cliente",
                "details": {"error_id": f"ERR_{int(time.time())}"},
                "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ")
            }
        )


@router.get(
    "/{cliente_id}/historico",
    response_model=HistoricoCompletoResponse,
    summary="Obtener hist√≥rico completo del cliente",
    description="""
    Obtiene el hist√≥rico completo de un cliente incluyendo:
    
    **Criterios de aceptaci√≥n implementados:**
    - Hist√≥rico de compras del cliente (productos, cantidades, fechas)
    - Productos preferidos y frecuencia de compra  
    - Devoluciones realizadas con sus motivos
    - La consulta debe responder en ‚â§ 2 segundos
    - La informaci√≥n consultada queda registrada para trazabilidad
    
    **Datos incluidos:**
    - üìã Hist√≥rico de compras (√∫ltimos N meses)
    - ‚≠ê Productos preferidos con estad√≠sticas
    - üîÑ Devoluciones con motivos
    - üìä Estad√≠sticas resumidas del cliente
    """
)
async def obtener_historico_cliente(
    request: Request,
    cliente_id: str = Path(
        ...,
        min_length=1,
        max_length=64,
        description="ID √∫nico del cliente"
    ),
    vendedor_id: str = Query(
        ...,
        min_length=1,
        max_length=64,
        description="ID del vendedor que realiza la consulta"
    ),
    limite_meses: int = Query(
        default=12,
        ge=1,
        le=60,
        description="N√∫mero de meses hacia atr√°s para el hist√≥rico (m√°ximo 60)"
    ),
    incluir_devoluciones: bool = Query(
        default=True,
        description="Si incluir o no las devoluciones en el hist√≥rico"
    ),
    session: AsyncSession = Depends(get_session)
):
    """Obtener hist√≥rico completo del cliente"""
    started = time.perf_counter_ns()
    
    try:
        service = ClienteService(session, settings)
        historico = await service.obtener_historico_completo(
            cliente_id=cliente_id,
            vendedor_id=vendedor_id,
            limite_meses=limite_meses,
            incluir_devoluciones=incluir_devoluciones
        )
        
        # Medir performance
        took_ms = int((time.perf_counter_ns() - started) / 1_000_000)
        
        # Headers informativos
        headers = {
            "X-Response-Time-Ms": str(took_ms),
            "X-SLA-Compliant": str(took_ms <= settings.sla_max_response_ms),
            "X-Service": "cliente-service"
        }
        
        return JSONResponse(
            content=historico.dict(),
            headers=headers
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={
                "error": "INTERNAL_SERVER_ERROR",
                "message": "Error interno al obtener hist√≥rico del cliente",
                "details": {
                    "cliente_id": cliente_id,
                    "error_id": f"ERR_{int(time.time())}"
                },
                "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ")
            }
        )


@router.get(
    "/health",
    summary="Health check del servicio",
    description="Endpoint de health check para verificar el estado del servicio"
)
async def health_check(request: Request):
    """Health check del servicio"""
    return {
        "status": "healthy",
        "service": "cliente-service",
        "version": "1.0.0",
        "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ"),
        "sla_max_response_ms": settings.sla_max_response_ms,
        "database": "connected"
    }


@router.get(
    "/metrics",
    summary="M√©tricas del servicio",
    description="Obtener m√©tricas b√°sicas del servicio cliente"
)
async def get_metrics(
    request: Request,
    session: AsyncSession = Depends(get_session)
):
    """Obtener m√©tricas del servicio"""
    try:
        service = ClienteService(session, settings)
        metrics = await service.obtener_metricas()
        
        return JSONResponse(
            content=metrics,
            headers={
                "X-Service": "cliente-service",
                "X-Generated-At": time.strftime("%Y-%m-%dT%H:%M:%SZ")
            }
        )
        
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "error": "METRICS_ERROR",
                "message": "Error al obtener m√©tricas",
                "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ")
            }
        )