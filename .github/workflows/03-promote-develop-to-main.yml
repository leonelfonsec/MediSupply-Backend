name: "03 - Promote develop -> main"

# ========================================
# ⚠️ WORKFLOW COMENTADO: Requiere permisos de organización
# 
# Este workflow crea automáticamente PRs de develop → main
# cuando se hace merge de un PR con la palabra "promover"
#
# Para habilitar:
# 1. Owner de la org debe ir a: https://github.com/organizations/MediSupply-Team/settings/actions
# 2. Marcar "Allow GitHub Actions to create and approve pull requests"
# 3. Descomentar el trigger 'pull_request' y el job completo
# 
# Por ahora: Crear PRs y merges a main de forma MANUAL
# ========================================

on:
  # pull_request:
  #   types: [closed]
  #   branches: [ develop ]
  workflow_dispatch:  # Permite ejecutarlo manualmente si es necesario

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # ========================================
  # ⚠️ JOB COMENTADO
  # ========================================
  
  placeholder:
    name: Workflow deshabilitado - Ver comentarios arriba
    runs-on: ubuntu-latest
    steps:
      - name: Info
        run: |
          echo "⚠️ Este workflow está deshabilitado"
          echo "📝 Para habilitarlo, lee los comentarios al inicio del archivo"
          echo "🔧 Requiere permisos de organización para crear PRs automáticamente"
  
  # create_pr_to_main:
  #   name: Crear PR -> main con auto-merge
  #   if: >
  #     github.event.pull_request.merged == true &&
  #     (
  #       contains(join(github.event.pull_request.labels.*.name, ','), 'promover') ||
  #       contains(github.event.pull_request.title, 'promover') ||
  #       contains(github.event.pull_request.body, 'promover')
  #     )
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with: { fetch-depth: 0 }
  #
  #     - name: Debug info
  #       run: |
  #         echo "🔍 Información del PR mergeado:"
  #         echo "   Merged: ${{ github.event.pull_request.merged }}"
  #         echo "   Title: ${{ github.event.pull_request.title }}"
  #         echo "   Labels: ${{ join(github.event.pull_request.labels.*.name, ',') }}"
  #         echo "   Base: ${{ github.event.pull_request.base.ref }}"
  #
  #     - name: Crear PR develop -> main
  #       id: create_or_find_pr
  #       uses: actions/github-script@v7
  #       with:
  #         github-token: ${{ secrets.PAT_TOKEN }}
  #         result-encoding: string
  #         script: |
  #           const { owner, repo } = context.repo;
  #           const head = 'develop';
  #           const base = 'main';
  #
  #           const prs = await github.paginate(github.rest.pulls.list, {
  #             owner, repo, state: 'open', base, per_page: 100
  #           });
  #           let pr = prs.find(p => p.head?.ref === head);
  #
  #           if (!pr) {
  #             const title = `🚀 Promote: ${head} → ${base} [promover]`;
  #             const body = `
  #             ## 🚀 PR Automático de Promoción
  #             
  #             Este PR fue creado automáticamente después del merge a \`develop\`.
  #             
  #             - ✅ Código revisado y probado en develop
  #             - 🔄 Auto-merge activado
  #             - 📦 Listo para producción
  #             
  #             **Trigger:** Merge con palabra clave "promover"
  #             **Palabra clave:** promover
  #             `;
  #             
  #             const { data } = await github.rest.pulls.create({ 
  #               owner, repo, head, base, title, body 
  #             });
  #             pr = data;
  #             
  #             try {
  #               await github.rest.issues.addLabels({
  #                 owner, repo, 
  #                 issue_number: pr.number, 
  #                 labels: ['automerge', 'promover', 'production']
  #               });
  #               core.info(`🏷️ Labels agregadas`);
  #             } catch (e) { 
  #               core.warning(`⚠️ No se pudieron agregar labels: ${e.message}`); 
  #             }
  #             
  #             core.info(`✅ PR creado: #${pr.number} → ${pr.html_url}`);
  #           } else {
  #             core.info(`✅ PR ya existe: #${pr.number} → ${pr.html_url}`);
  #           }
  #
  #           return String(pr.number);
  #
  #     - name: Enable auto-merge
  #       uses: peter-evans/enable-pull-request-automerge@v3
  #       with:
  #         token: ${{ secrets.PAT_TOKEN }}
  #         pull-request-number: ${{ steps.create_or_find_pr.outputs.result }}
  #         merge-method: squash
  #         
  #     - name: Success message
  #       run: |
  #         echo "✅ PR #${{ steps.create_or_find_pr.outputs.result }} creado/actualizado"
  #         echo "🔄 Auto-merge activado - se mergeará cuando pasen los checks"