name: "02 - Verify PR -> develop"

on:
  pull_request:
    branches: [ develop ]
    paths:
      - 'orders-service/**'

permissions:
  contents: read
  pull-requests: write

env:
  PYTHON_VERSION: '3.11'
  SERVICE_DIR: 'orders-service'

jobs:
  tests:
    name: Ejecutar unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles(format('{0}/requirements*.txt', env.SERVICE_DIR)) }}
          restore-keys: ${{ runner.os }}-pip-
          
      - name: Install deps
        run: |
          cd "${{ env.SERVICE_DIR }}"
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install -r requirements.txt pytest pytest-cov coverage
          
      - name: Run tests + coverage.xml
        run: |
          cd "${{ env.SERVICE_DIR }}"
          pytest -q --maxfail=1 --disable-warnings --cov=app --cov-branch
          python -m coverage xml -i -o coverage.xml
          
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: ${{ env.SERVICE_DIR }}/coverage.xml
          if-no-files-found: error

  sonar:
    name: SonarCloud anÃ¡lisis (rama develop)
    needs: [tests]
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: "${{ secrets.SONAR_TOKEN }}"
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-xml
          path: ${{ env.SERVICE_DIR }}
          
      - name: SonarCloud Scan (PR)
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: ${{ env.SERVICE_DIR }}
          
      - name: Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        with:
          scanMetadataReportFile: ${{ env.SERVICE_DIR }}/.scannerwork/report-task.txt
        env:
          SONAR_HOST_URL: "https://sonarcloud.io"

  enable_automerge:
    name: Enable auto-merge
    needs: [tests, sonar]
    runs-on: ubuntu-latest
    # Solo activar auto-merge si:
    # 1. Tiene la label 'automerge' o 'integrar', O
    # 2. Viene de una rama feature/feat, O
    # 3. Tiene la palabra 'integrar' en tÃ­tulo o body
    if: |
      contains(github.event.pull_request.labels.*.name, 'automerge') ||
      contains(github.event.pull_request.labels.*.name, 'integrar') ||
      startsWith(github.head_ref, 'feature/') ||
      startsWith(github.head_ref, 'feat/') ||
      contains(github.event.pull_request.title, 'integrar') ||
      contains(github.event.pull_request.body, 'integrar')
    steps:
      - name: Enable auto-merge
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash
          
      - name: Confirmation
        run: |
          echo "âœ… Auto-merge activado para PR #${{ github.event.pull_request.number }}"
          echo "ðŸ”„ Se harÃ¡ merge automÃ¡ticamente cuando todos los checks pasen"